---
description: 
globs: 
alwaysApply: true
---
# 🧠 React Project Architecture Prompt (FSD + Vite + CSR)

Build a **React + TypeScript + Tanstack Query** project using **Feature-Sliced Design (FSD)** with **Vite** and **Client-Side Rendering (CSR)**.  
Use **TailwindCSS** and **shadcn/ui**, and follow the structure and conventions below.  
All modules must follow the **ECMAScript Modules (ESM)** standard — use only `import/export`.

---

## 📁 `src/` Structure

```
src/
├── app/         # App-level config (routing, layout, theme, providers)
├── pages/       # Optional route mapping
├── processes/   # High-level business flows
├── widgets/     # Layout blocks (e.g., header, sidebar)
├── features/    # Functional units (e.g., login-form)
├── entities/    # Domain logic and models (e.g., user)
├── shared/      # Global UI, utilities, types (no business logic)
└── index.tsx
```

---

## 🧩 Slice Structure (`features/`, `entities/`, `widgets/`, `processes/`)

```
[slice-name]/
├── model/     # State, effects, selectors
├── ui/        # UI components
├── lib/       # Logic & helpers
├── api/       # API requests
├── config/    # Constants
├── types/     # Local types (optional)
└── index.ts   # Public entry point
```

---

## ⚖️ File Routing Rules

- UI or user interaction → `features/`
- Business data/logic → `entities/`
- Visual layout → `widgets/`
- Flow coordination → `processes/`
- Global/reusable → `shared/`

---

## 🔤 Naming Conventions

- **Use `kebab-case` for all file and folder names**, including components, hooks, utilities, and API modules.
- Examples:
  - `login-form.tsx`, `use-user-profile.ts`, `fetch-user.ts`, `user-card.tsx`
- Types should be named `types.ts` inside the appropriate folder.
- Each slice must expose a public interface via `index.ts`.

### 🧱 Component File Extension Rules

- **Use `.tsx` for all components that include JSX**.
- **If a component does not include JSX**, you may use `.ts` instead (e.g., for purely functional logic or styled-component wrappers).
- Example:
  - `user-card.tsx` (contains JSX)
  - `create-theme.ts` (pure function returning config object or class)

---

## 📘 README.md Guidelines

- Every **top-level folder** and **domain slice** must include a `README.md`.
- The README must explain:
  - The **purpose** of the folder or slice
  - The **responsibility boundaries**
  - Any **naming conventions**, architectural patterns, or edge cases used
  - **What should be included** in the folder and **how to extend** it

> ✅ When a file is added or modified in a folder, the `README.md` must be **updated to reflect the latest structure and purpose of the file**.  
> You **do not need to log historical changes** — only the current structure and rationale should be documented.

---

## 🚫 Do Not

- ❌ Import one feature/entity into another
- ❌ Put logic in `shared/`
- ❌ Place business logic inside widgets
- ❌ Overuse `useState` for complex state
- ❌ Use CommonJS (`require`, `module.exports`) — always use ES Modules

---

## 🎨 shadcn/ui Rules

- Wrap primitives in `shared/ui/primitives/`
- Create abstractions (e.g. `modal`, `alert-dialog`) in `shared/ui/`
- Never import directly from `@/components/ui` in features/entities

---

## ✅ Usage Examples

- “Create a `login` feature with form in `ui/login-form.tsx` and state in `model/store.ts`.”
- “Define `user` entity with `types.ts` and `avatar.tsx` in `ui/`.”
- “Wrap shadcn’s `dialog` into `shared/ui/primitives/dialog.tsx` and expose `modal.tsx` abstraction.”
- “Add a README that explains the structure and responsibility of `widgets/sidebar/`.”

---

## 📌 Summary

- Follow **FSD** strictly:
  - `entities` = domain logic  
  - `features` = interaction logic  
  - `widgets` = composition blocks  
  - `processes` = business flows  
  - `shared` = global utilities

- Use **`kebab-case`** for all filenames and folders  
- Use **ES Modules** only (`import` / `export`)  
- **Keep the `README.md` up to date** with the latest folder structure and purpose  
- **Use `.tsx` for JSX components; use `.ts` if the file contains no JSX**
